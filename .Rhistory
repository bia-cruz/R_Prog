faltas <- 20
notas <- 70
if (notas >= 70 & faltas <= 15) {
result <- 'Aprovado'
} else if (notas < 70 & faltas <= 15) {
result <- 'Exame Final'
} else {
result <- 'Reprovado por falta'
}
result
if (notas >= 70 & faltas <= 15) {
result <- 'Aprovado'
} else if (notas < 70 & faltas <= 15) {
result <- 'Exame Final'
} else if (notas < 40) {
result <- 'Reprovado por nota'
} else {
result <- 'Reprovado por falta'
}
result
faltas <- 15
notas <- 70
if (notas >= 70 & faltas <= 15) {
result <- 'Aprovado'
} else if (notas < 70 & faltas <= 15) {
result <- 'Exame Final'
} else if (notas < 40) {
result <- 'Reprovado por nota'
} else {
result <- 'Reprovado por falta'
}
result
notas <- 35
if (notas >= 70 & faltas <= 15) {
result <- 'Aprovado'
} else if (notas < 70 & faltas <= 15) {
result <- 'Exame Final'
} else if (notas < 40) {
result <- 'Reprovado por nota'
} else {
result <- 'Reprovado por falta'
}
result
if (notas >= 70 & faltas <= 15) {
result <- 'Aprovado'
} else if (notas < 40) {
result <- 'Reprovado por nota'
} else if (notas < 70 & faltas <= 15) {
result <- 'Exame Final'
} else {
result <- 'Reprovado por falta'
}
result
notas <- 70
if (notas >= 70 & faltas <= 15) {
result <- 'Aprovado'
} else if (notas < 40) {
result <- 'Reprovado por nota'
} else if (notas < 70 & faltas <= 15) {
result <- 'Exame Final'
} else {
result <- 'Reprovado por falta'
}
result
notas <- 65
if (notas >= 70 & faltas <= 15) {
result <- 'Aprovado'
} else if (notas < 40) {
result <- 'Reprovado por nota'
} else if (notas < 70 & faltas <= 15) {
result <- 'Exame Final'
} else {
result <- 'Reprovado por falta'
}
result
faltas <- 20
notas <- 65
if (notas >= 70 & faltas <= 15) {
result <- 'Aprovado'
} else if (notas < 40) {
result <- 'Reprovado por nota'
} else if (notas < 70 & faltas <= 15) {
result <- 'Exame Final'
} else {
result <- 'Reprovado por falta'
}
result
faltas <- 15
notas <- 20
if (notas >= 70 & faltas <= 15) {
result <- 'Aprovado'
} else if (notas < 40) {
result <- 'Reprovado por nota'
} else if (notas < 70 & faltas <= 15) {
result <- 'Exame Final'
} else {
result <- 'Reprovado por falta'
}
result
horario <- 20
if (horario >= 6 & horario < 12) {
saudacao <- 'Bom Dia'
} else if (horario >= 12 & horario < 18) {
saudacao <- 'Boa Tarde'
} else if (horario >= 18 & horario < 23) {
saudacao <- 'Boa Noite'
} else {
saudacao <- 'Não enviar mensagem!'
stop('Não enviar mensagem!')
}
saudacao
horario <- 13
if (horario >= 6 & horario < 12) {
saudacao <- 'Bom Dia'
} else if (horario >= 12 & horario < 18) {
saudacao <- 'Boa Tarde'
} else if (horario >= 18 & horario < 23) {
saudacao <- 'Boa Noite'
} else {
saudacao <- 'Não enviar mensagem!'
stop('Não enviar mensagem!')
}
saudacao
horario <- 2
if (horario >= 6 & horario < 12) {
saudacao <- 'Bom Dia'
} else if (horario >= 12 & horario < 18) {
saudacao <- 'Boa Tarde'
} else if (horario >= 18 & horario < 23) {
saudacao <- 'Boa Noite'
} else {
saudacao <- 'Não enviar mensagem!'
stop('Não enviar mensagem!')
}
saudacao
if (horario >= 6 & horario < 12) {
saudacao <- 'Bom Dia'
} else if (horario >= 12 & horario < 18) {
saudacao <- 'Boa Tarde'
} else if (horario >= 18 & horario < 23) {
saudacao <- 'Boa Noite'
} else {
stop('Não enviar mensagem!')
}
horario <- 10
if (horario >= 6 & horario < 12) {
saudacao <- 'Bom Dia'
} else if (horario >= 12 & horario < 18) {
saudacao <- 'Boa Tarde'
} else if (horario >= 18 & horario < 23) {
saudacao <- 'Boa Noite'
} else {
stop('Não enviar mensagem!')
}
saudacao
animal <- 'cachorro'
silencio()
silencio()
mugir()
animal <- 'cachorro'
som <- switch(animal,
'cachorro' = 'au au',
'gato' = 'miau',
'vaca' = 'muuu'
)
print(som)
som
# exercício sobre tipos de média
tipo <- 'aritmetica'
x <- 1:10
NA_real_
switch(tipo,
'aritmetica' = {
mean(x)
},
'harmonica' = {
length(x)/sum(1/x)
},
'geometrica' = {
prod(x)^(1/length(x))
},
{
NA_real_
})
# exercício sobre tipos de média
tipo <- 'harmonica'
x <- 1:10
switch(tipo,
'aritmetica' = {
mean(x)
},
'harmonica' = {
length(x)/sum(1/x)
},
'geometrica' = {
prod(x)^(1/length(x))
},
{
NA_real_
})
# exercício sobre tipos de média
tipo <- 'geometrica'
x <- 1:10
switch(tipo,
'aritmetica' = {
mean(x)
},
'harmonica' = {
length(x)/sum(1/x)
},
'geometrica' = {
prod(x)^(1/length(x))
},
{
NA_real_
})
# exercício sobre tipos de média
tipo <- 'bianca'
x <- 1:10
switch(tipo,
'aritmetica' = {
mean(x)
},
'harmonica' = {
length(x)/sum(1/x)
},
'geometrica' = {
prod(x)^(1/length(x))
},
{
NA_real_
})
# exercício sobre tipos de média
tipo <- 'aritmeetica'
x <- 1:10
switch(tipo,
'aritmetica' = {
mean(x)
},
'harmonica' = {
length(x)/sum(1/x)
},
'geometrica' = {
prod(x)^(1/length(x))
},
{
NA_real_
})
# exercício sobre tipos de média
tipo <- 'aritmetica'
x <- 1:10
switch(tipo,
'aritmetica' = {
mean(x)
},
'harmonica' = {
length(x)/sum(1/x)
},
'geometrica' = {
prod(x)^(1/length(x))
},
{
NA_real_
})
notas2 <- c('joao' = 70, 'ana' = 89,
'mario' = 78)
ifelse(notas >= 70, 'Aprovado',
ifelse(nptas >= 40, 'Exame',
'Rprovado'))
ifelse(notas2 >= 70, 'Aprovado',
ifelse(notas2 >= 40, 'Exame',
'Rprovado'))
notas2 <- c('joao' = 50, 'ana' = 89,
'mario' = 78)
ifelse(notas2 >= 70, 'Aprovado',
ifelse(notas2 >= 40, 'Exame',
'Rprovado'))
notas2 <- c('joao' = 50, 'ana' = 89,
'mario' = 28)
ifelse(notas2 >= 70, 'Aprovado',
ifelse(notas2 >= 40, 'Exame',
'Rprovado'))
ifelse(notas2 >= 70, 'Aprovado',
ifelse(notas2 >= 40, 'Exame',
'Reprovado'))
#versão com SWITCH VETORIAL
dplyr::case_when(notas2 >= 70 - 'Aprovado',
notas2 >= 40 - 'Exame',
TRUE - 'Reprovado')
#versão com SWITCH VETORIAL
dplyr::case_when(notas2 >= 70 ~ 'Aprovado',
notas2 >= 40 ~ 'Exame',
TRUE ~ 'Reprovado')
tx_juros <- 0.01
n_meses <- 12
rend <- numeric(n_meses)
rend[1] <- 100
for (i in 2:n_meses) {
rend[i] <- rend[i - 1] *(1 + tx_juros)
}
rend
y <- c(3, 2, 2, 1, NA, 0, 4, 1)
s <- 0
for (i in y) {
if (s > 10) break
if (is.na(i)) next
s <- s + i
print(s)
}
s
y <- c(0, 0, 1, 1, 1, 1, NA)
s <- 0
for (i in y) {
if (s > 10) break
if (is.na(i)) next
s <- s + i
print(s)
}
s
y <- c(0, 0, 10, 1, 1, 1, NA)
s <- 0
for (i in y) {
if (s > 10) break
if (is.na(i)) next
s <- s + i
print(s)
}
s
y <- c(3, 2, 2, 1, NA, 0, 4, 1)
s <- 0
for (i in y) {
if (s > 10) break
if (is.na(i)) next
s <- s + i
print(s)
}
s
for (i in 1:10) {
print(i^2)
}
n_numbers <- 12
total <- 0
i <- 1L
while (i <n_numbers) {
u <- total + runif(1)
if (sum(u) > 4) break
total <- u
i <- i + 1L
}
total
while (i <n_numbers) {
u <- total + runif(1)
if (sum(u) > 4) break
total <- u
i <- i + 1L
}
total
total <- 0
i <- 1L
i <- i+1L
total
i <- i + 1L
total
i <- 1L
repeat {
u <- total + runif(1)
if (sum(u) > 4) break
total <- u
i <- i + 1L
}
total
# exercício sobre lançamentos de dados
n_max <- 100
tentativas <- 1
while (tentativas < n_max) {
l1 <- sample(1:6, 3, replace = TRUE) #joga os dados
l1_ordenado <- sort(l1) #ordena o l1
print(l1_ordenado)
seque <- sum(ifelse(diff(l1_ordenado) == 1, TRUE, FALSE))
if(seque == 2) break
tentativas <- tentativas + 1
}
tentativas
while (tentativas < n_max) {
l1 <- sample(1:6, 3, replace = TRUE) #joga os dados
l1_ordenado <- sort(l1) #ordena o l1
print(l1_ordenado)
seque <- sum(ifelse(diff(l1_ordenado) == 1, TRUE, FALSE))
if(seque == 2) break
tentativas <- tentativas + 1
}
tentativas
while (tentativas < n_max) {
l1 <- sample(1:6, 3, replace = TRUE) #joga os dados
l1_ordenado <- sort(l1) #ordena o l1
print(l1_ordenado)
seque <- sum(ifelse(diff(l1_ordenado) == 1, TRUE, FALSE))
if(seque == 2) break
tentativas <- tentativas + 1
}
tentativas
while (tentativas < n_max) {
l1 <- sample(1:6, 3, replace = TRUE) #joga os dados
l1_ordenado <- sort(l1) #ordena o l1
print(l1_ordenado)
seque <- sum(ifelse(diff(l1_ordenado) == 1, TRUE, FALSE))
if(seque == 2) break
tentativas <- tentativas + 1
}
tentativas
output <- c()
output[i] <- tentativas
mean(output)
n_max <- 100
tentativas <- 1
output <- c()
for (i in 1:1000) {
n_max <- 100
tentativas <- 1
while (tentativas < n_max) {
l1 <- sample(1:6, 3, replace = TRUE) #joga os dados
l1_ordenado <- sort(l1) #ordena o l1
print(l1_ordenado)
seque <- sum(ifelse(diff(l1_ordenado) == 1, TRUE, FALSE))
if(seque == 2) break
tentativas <- tentativas + 1
}
output[i] <- tentativas
}
mean(output)
hist(output)
imc <- function(peso, altura) {
imc <- (peso/altura)^2
limits <- c(0, 18.5, 25, 30, Inf)
labels <- c('Magreza', 'Adequado',
'Pré-Obeso', 'Obesidade')
classif <- labelS[findInterval(imc, vec = limits)]
return(list(IMC = imc, Classificação = classif))
}
return
imc
imc(80, 1.90)
classif <- labels[findInterval(imc, vec = limits)]
imc <- function(peso, altura) {
imc <- (peso/altura)^2
limits <- c(0, 18.5, 25, 30, Inf)
labels <- c('Magreza', 'Adequado',
'Pré-Obeso', 'Obesidade')
classif <- labels[findInterval(imc, vec = limits)]
return(list(IMC = imc, Classificação = classif))
}
imc(80, 1.90)
imc <- peso/altura^2
imc <- function(peso, altura) {
imc <- peso/altura^2
limits <- c(0, 18.5, 25, 30, Inf)
labels <- c('Magreza', 'Adequado',
'Pré-Obeso', 'Obesidade')
classif <- labels[findInterval(imc, vec = limits)]
return(list(IMC = imc, Classificação = classif))
}
imc(80, 1.90)
imc(90, 1.65)
baskara <- function(a, b, c) {
delta <- b^2 - 4 * a * c
x <- (-b c(-1,1) * sqrt(delta))/(2 * a)
baskara <- function(a, b, c) {
delta <- b^2 - 4 * a * c
x <- (-b c(-1,1) * sqrt(delta))/(2 * a)
baskara <- function(a, b, c) {
delta <- b^2 - 4 * a * c
x <- (-b + c(-1,1) * sqrt(delta))/(2 * a)
return(x)
}
baskara(a = 1, b= 2, c= 1)
baskara(a = 1, b= 4, c= 1)
curve(x^2 + 4*x + 1)
curve(x^2 + 4*x + 1, from = -2, to = 2)
joga_dados <- function(n_dados, n_max, n_simulacao) {
output <- c()
for(i in 1:n_simulacao) {
tentativas <- 1
while(tentativas < n_max) {
l1 <- sample(1:6, n_dados, replace = TRUE) # joga os dados
l1_ordenado <- sort(l1) # ordenada
seque <- sum(ifelse(diff(l1_ordenado) == 1, TRUE, FALSE))
if(seque == c(n_dados-1)) break
tentativas <- tentativas + 1
}
output[i] <- tentativas
}
return(output)
}
jogadas <- joga_dados(n_dados = 3, n_max = 100, n_simulacao = 1000)
mean(jogadas)
jogadas <- joga_dados(n_dados = 4, n_max = 100, n_simulacao = 1000)
mean(jogadas)
jogadas <- joga_dados(n_dados = 5, n_max = 100, n_simulacao = 1000)
mean(jogadas)
## Funções sem argumentos
calcula_imc <- function() {
if(altura < 0) stop("Altura deve ser maior do que zero.")
if(peso < 0) stop("Peso deve ser maior do que zero.")
imc <- peso/(altura^2)
limits <- c(0, 18.5, 25, 30, Inf)
labels <- c("Magreza", "Adequado", "Pré-obeso", "Obesidade")
classif <- labels[findInterval(imc, limits)]
return(list(IMC = imc, Classificao = classif))
}
peso <- 70
altura <- 1.70
calcula_imc()
